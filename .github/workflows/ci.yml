name: CI
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-stats:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: spark_stats
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/spark_stats
      EVALUATE_DB_URL: postgres://postgres:postgres@localhost:5432/spark_evaluate
      NPM_CONFIG_WORKSPACE: stats
    steps:
      - run: psql "${DATABASE_URL}" -c "CREATE DATABASE spark_evaluate"
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - run: npm ci
      - run: npm run migrate
      - run: npm test

  build-observer:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: spark_stats
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/spark_stats
      EVALUATE_DB_URL: postgres://postgres:postgres@localhost:5432/spark_evaluate
      NPM_CONFIG_WORKSPACE: observer
    steps:
      - run: psql "${DATABASE_URL}" -c "CREATE DATABASE spark_evaluate"
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - run: npm ci
      - run: npm run migrate
      - run: npm test

  lint-all:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - run: npm ci
      - run: npm run lint
      - run: npm run test:types

  dry-run:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: spark_stats
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/spark_stats
      EVALUATE_DB_URL: postgres://postgres:postgres@localhost:5432/spark_evaluate
      NPM_CONFIG_WORKSPACE: observer
    steps:
      - run: psql "${DATABASE_URL}" -c "CREATE DATABASE spark_evaluate"
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - run: npm ci
      - run: npm run migrate
      - run: npm run dry-run
        env:
            GLIF_TOKEN: ${{ secrets.GLIF_TOKEN }}
            INFLUXDB_TOKEN: ${{ secrets.INFLUXDB_TOKEN }}

  docker-build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    env:
      REGISTRY: ghcr.io
    steps:
      - uses: actions/checkout@v5

      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build monorepo Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          cache-from: type=registry,ref=ghcr.io/filecoin-station/core
          cache-to: type=inline

  deploy-stats:
    if: github.ref == 'refs/heads/main'
    needs: [build-stats, build-observer, docker-build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - run: flyctl deploy --remote-only -c stats/fly.toml
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
      - if: failure()
        uses: slackapi/slack-github-action@v2.1.1
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: |
            {
              "channel": "alerts",
              "text": "Deployment of `${{ github.event.repository.name }}` failed",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":warning: *<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Deployment of `${{ github.event.repository.name }}` failed>*"
                  }
                }
              ]
            }

  deploy-observer:
    if: github.ref == 'refs/heads/main'
    needs: [build-stats, build-observer, docker-build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - run: flyctl deploy --remote-only -c observer/fly.toml
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN_OBSERVER }}
      - if: failure()
        uses: slackapi/slack-github-action@v2.1.1
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: |
            {
              "text": "Deployment of `${{ github.event.repository.name }}` failed",
              "blocks": [
                {
                  "channel": "alerts",
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":warning: *<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Deployment of `${{ github.event.repository.name }}` failed>*"
                  }
                }
              ]
            }
